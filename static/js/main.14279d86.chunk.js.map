{"version":3,"sources":["components/TextBox/TextBox.js","components/Timer/Timer.js","components/WordPerMinute/WordPerMinute.js","components/TextArea/TextArea.js","App.js","index.js"],"names":["StyledTextBox","styled","div","TextBox","randomParagraph","textColor","map","character","index","style","color","fontWeight","defaultProps","Timer","timeRemaining","WordPerMinute","wordPerMinute","StyledTextArea","textarea","TextArea","handleInputChange","isFinished","textAreaRef","useRef","useEffect","current","blur","ref","disabled","onChange","Container","Header","App","useState","setRandomParagraph","setTextColor","time","setTime","error","setError","setWordPerMinute","intervalRef","totalRef","startTimer","startTime","Date","setInterval","Math","floor","getTimerTime","fetch","then","response","json","data","splittedParagraph","join","replace","split","colorArray","_","catch","clearInterval","timeInMinute","grossWordPerMinute","e","splittedTargetValue","target","value","textColorCopy","forEach","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14279d86.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTextBox = styled.div`\r\n    padding: 16px;\r\n    line-height: 1.5rem;\r\n`\r\n\r\nconst TextBox = ({ randomParagraph, textColor }) => {\r\n    const renderParagraph = () => {\r\n        const splittedParagraph = randomParagraph.map((character, index) => (\r\n            <span style={{\r\n                color: textColor[index],\r\n                fontWeight: textColor[index] === 'red' ? 600 : 400,\r\n            }}>\r\n                {character}\r\n            </span>\r\n        ));\r\n        return splittedParagraph;\r\n    }\r\n\r\n    return (\r\n        <StyledTextBox >\r\n            {renderParagraph()}\r\n        </StyledTextBox>\r\n    )\r\n}\r\n\r\nTextBox.propTypes = {\r\n    randomParagraph: PropTypes.arrayOf(PropTypes.string),\r\n    textColor: PropTypes.arrayOf(PropTypes.string),\r\n}\r\n\r\nTextBox.defaultProps = {\r\n    randomParagraph: [],\r\n    textColor: [],\r\n}\r\n\r\nexport default TextBox;","import React from 'react';\r\n\r\nconst Timer = ({ timeRemaining }) => {\r\n    return (\r\n        <div>{timeRemaining}</div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst WordPerMinute = ({ wordPerMinute }) => {\r\n    return (\r\n        <div>WPM (Word per Minute): {wordPerMinute}</div>\r\n    )\r\n}\r\n\r\nWordPerMinute.propTypes = {\r\n    wordPerMinute: PropTypes.number,\r\n}\r\n\r\nWordPerMinute.defaultProps = {\r\n    wordPerMinute: 0,\r\n}\r\n\r\nexport default WordPerMinute;","import React, { useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\nconst StyledTextArea = styled.textarea`\r\n    background-color: transparent;\r\n    border: 2px solid #f1f1f1;\r\n    outline: none;\r\n    height: 8rem;\r\n    resize: none;\r\n    padding: 16px;\r\n    &:focus{\r\n        border-color: black;\r\n    }\r\n`\r\n\r\nconst TextArea = ({ handleInputChange, isFinished }) => {\r\n    const textAreaRef = useRef(null);\r\n    useEffect(() => {\r\n        if (isFinished) {\r\n            textAreaRef.current.blur();\r\n        }\r\n    }, [isFinished])\r\n    return (\r\n        <StyledTextArea\r\n            ref={textAreaRef}\r\n            disabled={isFinished}\r\n            onChange={handleInputChange}>\r\n        </StyledTextArea>\r\n    )\r\n}\r\n\r\nTextArea.propTypes = {\r\n    handleInputChange: PropTypes.func,\r\n    isFinished: PropTypes.bool,\r\n}\r\n\r\nTextArea.defaultProps = {\r\n    handleInputChange: () => { },\r\n    isFinished: false,\r\n}\r\n\r\nexport default TextArea;","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport TextBox from \"./components/TextBox/TextBox\";\r\nimport Timer from \"./components/Timer/Timer\"\r\nimport WordPerMinute from \"./components/WordPerMinute/WordPerMinute\"\r\nimport TextArea from './components/TextArea/TextArea'\r\n\r\nconst Container = styled.div`\r\n  max-width: 1024px;\r\n  margin: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 16px;\r\n  width: 100%;\r\n`\r\n\r\nconst RANDOM_PARAGRAPH_API_URL = 'https://baconipsum.com/api/';\r\n\r\nconst App = () => {\r\n  const MAX_TIME_IN_SECONDS = 3;\r\n\r\n  const [randomParagraph, setRandomParagraph] = useState([]);\r\n  const [textColor, setTextColor] = useState([]);\r\n  const [time, setTime] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [wordPerMinute, setWordPerMinute] = useState(0);\r\n\r\n  const intervalRef = useRef(null);\r\n  const totalRef = useRef(0);\r\n\r\n  const isFinished = MAX_TIME_IN_SECONDS - time <= 0;\r\n\r\n  const getTimerTime = (startTime) => {\r\n    return Math.floor((new Date - startTime) / 1000)\r\n  }\r\n\r\n  const startTimer = () => {\r\n    const startTime = new Date();\r\n    intervalRef.current = setInterval(() => {\r\n      if (!isFinished) {\r\n        setTime(getTimerTime(startTime));\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  const handleInputChange = (e) => {\r\n    if (!isFinished) {\r\n      if (!intervalRef.current) {\r\n        startTimer();\r\n      }\r\n      const splittedTargetValue = e.target.value.split('');\r\n      const textColorCopy = [...textColor];\r\n      totalRef.current = 0;\r\n      randomParagraph.forEach((value, index) => {\r\n        if (!splittedTargetValue[index]) {\r\n          textColorCopy[index] = 'red';\r\n          setTextColor(textColorCopy);\r\n        }\r\n        else if (value === splittedTargetValue[index]) {\r\n          textColorCopy[index] = 'green';\r\n          setTextColor(textColorCopy);\r\n          totalRef.current += 1;\r\n        }\r\n        else {\r\n          textColorCopy[index] = 'red';\r\n          setTextColor(textColorCopy);\r\n          totalRef.current += 1;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  const resetAllValues = () => {\r\n    setTime(null);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const DEFAULT_TYPE = 'all-meat';\r\n    fetch(`${RANDOM_PARAGRAPH_API_URL}?type=${DEFAULT_TYPE}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const splittedParagraph = data.join(' ').replace(/\\s{2,}/g, ' ').split('');\r\n        const colorArray = splittedParagraph.map(_ => 'red');\r\n        setTextColor(colorArray);\r\n        setRandomParagraph(splittedParagraph);\r\n      })\r\n      .catch((error) => setError(error));\r\n\r\n    return () => {\r\n      clearInterval(intervalRef.current)\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isFinished) {\r\n      clearInterval(intervalRef.current)\r\n    }\r\n    if (time && !isFinished) {\r\n      const timeInMinute = time / 60;\r\n      const grossWordPerMinute = Math.floor((totalRef.current / 5) / timeInMinute);\r\n      setWordPerMinute(grossWordPerMinute);\r\n      if (MAX_TIME_IN_SECONDS - time < 0) {\r\n        resetAllValues();\r\n      }\r\n    }\r\n  }, [time]);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <Timer timeRemaining={MAX_TIME_IN_SECONDS - time} />\r\n        <WordPerMinute wordPerMinute={wordPerMinute} />\r\n      </Header>\r\n\r\n      { !error\r\n        ? <TextBox textColor={textColor} randomParagraph={randomParagraph} />\r\n        : { error }}\r\n      <TextArea\r\n        handleInputChange={handleInputChange}\r\n        isFinished={isFinished}\r\n      ></TextArea>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}