{"version":3,"sources":["components/TextBox/TextBox.js","components/Timer/Timer.js","components/WordPerMinute/WordPerMinute.js","components/TextArea/TextArea.js","components/Completion/Completion.js","components/MatchHistory/MatchHistory.js","App.js","index.js"],"names":["StyledTextBox","styled","div","TextBox","randomParagraph","textColor","map","character","index","style","color","fontWeight","opacity","defaultProps","Timer","timeRemaining","WordPerMinute","wordPerMinute","StyledTextArea","textarea","TextArea","handleInputChange","isFinished","textAreaRef","useEffect","current","blur","ref","disabled","onChange","onPaste","e","preventDefault","Completion","completion","Math","floor","Container","PlayerContainer","MatchHistory","matches","sorter","a","b","Number","wpm","sort","match","playerName","matchId","Header","RetryButton","button","SaveButton","FAKE_SERVER_API","input","App","useState","setRandomParagraph","setTextColor","setMatches","time","setTime","error","setError","setWordPerMinute","setCompletion","useRef","intervalRef","totalRef","startTimer","startTime","Date","setInterval","getTimerTime","resetAllValues","clearInterval","getRandomParagraph","value","fetch","then","response","json","data","splittedParagraph","join","replace","split","colorArray","_","catch","timeInMinute","grossWordPerMinute","splittedTargetValue","target","textColorCopy","forEach","length","onClick","url","method","headers","body","JSON","stringify","form","id","v4","postData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42483e62.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTextBox = styled.div`\r\n    padding: 16px;\r\n    line-height: 1.5rem;\r\n`\r\n\r\nconst TextBox = ({ randomParagraph, textColor }) => {\r\n    const renderParagraph = () => {\r\n        const splittedParagraph = randomParagraph.map((character, index) => (\r\n            <span\r\n                style={{\r\n                    color: textColor[index],\r\n                    fontWeight: textColor[index] === 'red' ? 600 : 400,\r\n                    opacity: textColor[index] === 'red' ? 1 : 0.54,\r\n                }}\r\n            >\r\n                {character}\r\n            </span>\r\n        ));\r\n        return splittedParagraph;\r\n    }\r\n\r\n    return (\r\n        <StyledTextBox >\r\n            {renderParagraph()}\r\n        </StyledTextBox>\r\n    )\r\n}\r\n\r\nTextBox.propTypes = {\r\n    randomParagraph: PropTypes.arrayOf(PropTypes.string),\r\n    textColor: PropTypes.arrayOf(PropTypes.string),\r\n}\r\n\r\nTextBox.defaultProps = {\r\n    randomParagraph: [],\r\n    textColor: [],\r\n}\r\n\r\nexport default TextBox;","import React from 'react';\r\n\r\nconst Timer = ({ timeRemaining }) => {\r\n    return (\r\n        <div>Time Remaining: <strong>{timeRemaining} secs</strong></div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst WordPerMinute = ({ wordPerMinute }) => {\r\n    return (\r\n        <div>Average Speed: <strong>{wordPerMinute} WPM</strong></div>\r\n    )\r\n}\r\n\r\nWordPerMinute.propTypes = {\r\n    wordPerMinute: PropTypes.number,\r\n}\r\n\r\nWordPerMinute.defaultProps = {\r\n    wordPerMinute: 0,\r\n}\r\n\r\nexport default WordPerMinute;","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\nconst StyledTextArea = styled.textarea`\r\n    background-color: transparent;\r\n    border: 2px solid #f1f1f1;\r\n    outline: none;\r\n    height: 8rem;\r\n    resize: none;\r\n    padding: 8px;\r\n    margin: 8px;\r\n    &:focus{\r\n        border-color: black;\r\n    }\r\n`\r\n\r\nconst TextArea = ({ handleInputChange, isFinished, textAreaRef }) => {\r\n    useEffect(() => {\r\n        if (isFinished) {\r\n            textAreaRef.current.blur();\r\n        }\r\n    }, [isFinished])\r\n    return (\r\n        <StyledTextArea\r\n            ref={textAreaRef}\r\n            disabled={isFinished}\r\n            onChange={handleInputChange}\r\n            onPaste={(e) => e.preventDefault()}\r\n        >\r\n        </StyledTextArea>\r\n    )\r\n}\r\n\r\nTextArea.propTypes = {\r\n    handleInputChange: PropTypes.func,\r\n    isFinished: PropTypes.bool,\r\n    textAreaRef: PropTypes.object,\r\n}\r\n\r\nTextArea.defaultProps = {\r\n    handleInputChange: () => { },\r\n    isFinished: false,\r\n    textAreaRef: {}\r\n}\r\n\r\nexport default TextArea;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Completion = ({\r\n    completion\r\n}) => {\r\n    return (\r\n        <div>\r\n            Completion: <strong>{Math.floor(completion * 100)}%</strong>\r\n        </div>\r\n    )\r\n}\r\n\r\nCompletion.propTypes = {\r\n    completion: PropTypes.number,\r\n}\r\n\r\nCompletion.defaultProps = {\r\n    completion: 0,\r\n}\r\n\r\nexport default Completion;","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    height: 100%;\r\n    margin: 16px;\r\n`;\r\n\r\nconst PlayerContainer = styled.div`\r\n    min-height: 75px;\r\n    padding: 16px;\r\n    border: 1px solid grey;\r\n    border-radius: 4px;\r\n    margin: 16px 0;\r\n    border-left: 4px solid grey;\r\n`;\r\n\r\n\r\nconst MatchHistory = ({ matches }) => {\r\n\r\n    const sorter = (a, b) => {\r\n        return Number(a.wpm) < Number(b.wpm);\r\n    }\r\n\r\n    const renderMatches = () => {\r\n        const sortedMatches = matches.sort(sorter);\r\n        const matchesDiv = sortedMatches.map((match) => (\r\n            <PlayerContainer key={match.matchId}>\r\n                <div>\r\n                    Player Name: {match.playerName}\r\n                </div>\r\n                <div>\r\n                    WPM: {match.wpm}\r\n                </div>\r\n            </PlayerContainer>\r\n        ));\r\n        return matchesDiv\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <br></br>\r\n            Match History (Sorted based on score):\r\n            {renderMatches()}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MatchHistory","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport TextBox from \"./components/TextBox/TextBox\";\r\nimport Timer from \"./components/Timer/Timer\"\r\nimport WordPerMinute from \"./components/WordPerMinute/WordPerMinute\"\r\nimport TextArea from './components/TextArea/TextArea'\r\nimport Completion from \"./components/Completion/Completion\"\r\nimport MatchHistory from \"./components/MatchHistory/MatchHistory\"\r\nimport { v4 } from 'uuid';\r\n\r\nconst Container = styled.div`\r\n  max-width: 1024px;\r\n  margin: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  padding: 16px;\r\n  width: 100%;\r\n`;\r\n\r\nconst RetryButton = styled.button`\r\n  background-color: #f0f0f0;\r\n  border-radius: 4px;\r\n  border: 1px solid black;\r\n  cursor: pointer;\r\n  margin: 8px;\r\n  &:focus{\r\n    border: 1px solid grey;\r\n  }\r\n`;\r\n\r\nconst SaveButton = styled.button`\r\n  background-color: rgb(200,255,200);\r\n  border-radius: 4px;\r\n  border: 1px solid black;\r\n  cursor: pointer;\r\n  margin: 8px;\r\n  &:focus{\r\n    border: 1px solid grey;\r\n  }\r\n  &:disabled{\r\n    pointer-events: none;\r\n    opacity: 0.54;\r\n    cursor: initial;\r\n  }\r\n`;\r\n\r\nconst StyledNameInput = styled.input`\r\n  height: 16px;\r\n  padding: 4px;\r\n`\r\n\r\nconst RANDOM_PARAGRAPH_API_URL = 'https://baconipsum.com/api/';\r\nconst FAKE_SERVER_API = \"https://fake-type-racer-server.herokuapp.com/matches\"\r\n\r\nconst App = () => {\r\n  const MAX_TIME_IN_SECONDS = 180;\r\n\r\n  const [randomParagraph, setRandomParagraph] = useState([]);\r\n  const [textColor, setTextColor] = useState([]);\r\n  const [matches, setMatches] = useState([]);\r\n  const [time, setTime] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [wordPerMinute, setWordPerMinute] = useState(0);\r\n  const [completion, setCompletion] = useState(0);\r\n\r\n  const textAreaRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const totalRef = useRef(0);\r\n\r\n  const isFinished = MAX_TIME_IN_SECONDS - time <= 0;\r\n\r\n  const getTimerTime = (startTime) => {\r\n    return Math.floor((new Date - startTime) / 1000)\r\n  }\r\n\r\n  const startTimer = () => {\r\n    const startTime = new Date();\r\n    intervalRef.current = setInterval(() => {\r\n      if (!isFinished) {\r\n        setTime(getTimerTime(startTime));\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  const handleInputChange = (e) => {\r\n    if (!isFinished) {\r\n      if (!intervalRef.current) {\r\n        startTimer();\r\n      }\r\n      const splittedTargetValue = e.target.value.split('');\r\n      const textColorCopy = [...textColor];\r\n      totalRef.current = 0;\r\n      randomParagraph.forEach((value, index) => {\r\n        if (!splittedTargetValue[index]) {\r\n          textColorCopy[index] = 'red';\r\n          setTextColor(textColorCopy);\r\n        }\r\n        else if (value === splittedTargetValue[index]) {\r\n          textColorCopy[index] = 'green';\r\n          setTextColor(textColorCopy);\r\n          totalRef.current += 1;\r\n        }\r\n        else {\r\n          textColorCopy[index] = 'red';\r\n          setTextColor(textColorCopy);\r\n          totalRef.current += 1;\r\n        }\r\n      });\r\n      setCompletion(splittedTargetValue.length / randomParagraph.length)\r\n    }\r\n  }\r\n\r\n  const resetAllValues = () => {\r\n    clearInterval(intervalRef.current)\r\n    setTime(null);\r\n    totalRef.current = 0;\r\n    intervalRef.current = null;\r\n    setWordPerMinute(0);\r\n    setCompletion(0);\r\n    setTime(null);\r\n    setError(null);\r\n    getRandomParagraph()\r\n    textAreaRef.current.value = '';\r\n  }\r\n\r\n  const getRandomParagraph = () => {\r\n    const DEFAULT_TYPE = 'all-meat';\r\n    fetch(`${RANDOM_PARAGRAPH_API_URL}?type=${DEFAULT_TYPE}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const splittedParagraph = data.join(' ').replace(/\\s{2,}/g, ' ').split('');\r\n        const colorArray = splittedParagraph.map(_ => 'red');\r\n        setTextColor(colorArray);\r\n        setRandomParagraph(splittedParagraph);\r\n      })\r\n      .catch((error) => setError(error));\r\n  }\r\n\r\n  const saveCurrentValues = () => {\r\n    async function postData(url = '', data = {}) {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n      });\r\n      return response.json();\r\n    }\r\n\r\n    const form = {\r\n      id: v4(),\r\n      wpm: wordPerMinute,\r\n      playerName: \"Guest\"\r\n    };\r\n    postData(FAKE_SERVER_API, form);\r\n    setMatches([...matches, form])\r\n  }\r\n\r\n  const fetchMatches = () => {\r\n    fetch(FAKE_SERVER_API)\r\n      .then(response => response.json())\r\n      .then(data => setMatches(data))\r\n  }\r\n\r\n  useEffect(() => {\r\n    getRandomParagraph()\r\n    fetchMatches();\r\n    return () => {\r\n      clearInterval(intervalRef.current)\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (completion >= 1) {\r\n      textAreaRef.current.blur();\r\n      clearInterval(intervalRef.current)\r\n    }\r\n  }, [completion])\r\n\r\n  useEffect(() => {\r\n    if (isFinished) {\r\n      clearInterval(intervalRef.current)\r\n    }\r\n    if (time && !isFinished) {\r\n      const timeInMinute = time / 60;\r\n      const grossWordPerMinute = Math.floor((totalRef.current / 5) / timeInMinute);\r\n      setWordPerMinute(grossWordPerMinute);\r\n      if (MAX_TIME_IN_SECONDS - time < 0) {\r\n        resetAllValues();\r\n      }\r\n    }\r\n  }, [time]);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <span>Player Name: <strong>Guest</strong></span>\r\n        <Timer timeRemaining={MAX_TIME_IN_SECONDS - time} />\r\n        <WordPerMinute wordPerMinute={wordPerMinute} />\r\n        <Completion completion={completion} />\r\n      </Header>\r\n      {!error\r\n        ? <TextBox textColor={textColor} randomParagraph={randomParagraph} />\r\n        : { error }}\r\n      <TextArea\r\n        handleInputChange={handleInputChange}\r\n        isFinished={isFinished}\r\n        textAreaRef={textAreaRef}\r\n      />\r\n      <RetryButton onClick={resetAllValues}>Retry</RetryButton>\r\n      <SaveButton disabled={!isFinished} onClick={saveCurrentValues}>Save Current WPM</SaveButton>\r\n      <MatchHistory matches={matches} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}