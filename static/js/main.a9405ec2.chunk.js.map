{"version":3,"sources":["components/TextBox/TextBox.js","components/Timer/Timer.js","components/WordPerMinute/WordPerMinute.js","components/TextArea/TextArea.js","components/Completion/Completion.js","App.js","index.js"],"names":["StyledTextBox","styled","div","TextBox","randomParagraph","textColor","map","character","index","style","color","fontWeight","opacity","defaultProps","Timer","timeRemaining","WordPerMinute","wordPerMinute","StyledTextArea","textarea","TextArea","handleInputChange","isFinished","textAreaRef","useEffect","current","blur","ref","disabled","onChange","onPaste","e","preventDefault","Completion","completion","Math","floor","Container","Header","RetryButton","button","App","useState","setRandomParagraph","setTextColor","time","setTime","error","setError","setWordPerMinute","setCompletion","useRef","intervalRef","totalRef","startTimer","startTime","Date","setInterval","getTimerTime","resetAllValues","clearInterval","getRandomParagraph","value","fetch","then","response","json","data","splittedParagraph","join","replace","split","colorArray","_","catch","timeInMinute","grossWordPerMinute","splittedTargetValue","target","textColorCopy","forEach","length","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9405ec2.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTextBox = styled.div`\r\n    padding: 16px;\r\n    line-height: 1.5rem;\r\n`\r\n\r\nconst TextBox = ({ randomParagraph, textColor }) => {\r\n    const renderParagraph = () => {\r\n        const splittedParagraph = randomParagraph.map((character, index) => (\r\n            <span\r\n                style={{\r\n                    color: textColor[index],\r\n                    fontWeight: textColor[index] === 'red' ? 600 : 400,\r\n                    opacity: textColor[index] === 'red' ? 1 : 0.54,\r\n                }}\r\n            >\r\n                {character}\r\n            </span>\r\n        ));\r\n        return splittedParagraph;\r\n    }\r\n\r\n    return (\r\n        <StyledTextBox >\r\n            {renderParagraph()}\r\n        </StyledTextBox>\r\n    )\r\n}\r\n\r\nTextBox.propTypes = {\r\n    randomParagraph: PropTypes.arrayOf(PropTypes.string),\r\n    textColor: PropTypes.arrayOf(PropTypes.string),\r\n}\r\n\r\nTextBox.defaultProps = {\r\n    randomParagraph: [],\r\n    textColor: [],\r\n}\r\n\r\nexport default TextBox;","import React from 'react';\r\n\r\nconst Timer = ({ timeRemaining }) => {\r\n    return (\r\n        <div>Time Remaining: {timeRemaining} sec/s</div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst WordPerMinute = ({ wordPerMinute }) => {\r\n    return (\r\n        <div>Average Speed: {wordPerMinute} WPM</div>\r\n    )\r\n}\r\n\r\nWordPerMinute.propTypes = {\r\n    wordPerMinute: PropTypes.number,\r\n}\r\n\r\nWordPerMinute.defaultProps = {\r\n    wordPerMinute: 0,\r\n}\r\n\r\nexport default WordPerMinute;","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\nconst StyledTextArea = styled.textarea`\r\n    background-color: transparent;\r\n    border: 2px solid #f1f1f1;\r\n    outline: none;\r\n    height: 8rem;\r\n    resize: none;\r\n    padding: 8px;\r\n    margin: 8px;\r\n    &:focus{\r\n        border-color: black;\r\n    }\r\n`\r\n\r\nconst TextArea = ({ handleInputChange, isFinished, textAreaRef }) => {\r\n    useEffect(() => {\r\n        if (isFinished) {\r\n            textAreaRef.current.blur();\r\n        }\r\n    }, [isFinished])\r\n    return (\r\n        <StyledTextArea\r\n            ref={textAreaRef}\r\n            disabled={isFinished}\r\n            onChange={handleInputChange}\r\n            onPaste={(e) => e.preventDefault()}\r\n        >\r\n        </StyledTextArea>\r\n    )\r\n}\r\n\r\nTextArea.propTypes = {\r\n    handleInputChange: PropTypes.func,\r\n    isFinished: PropTypes.bool,\r\n    textAreaRef: PropTypes.object,\r\n}\r\n\r\nTextArea.defaultProps = {\r\n    handleInputChange: () => { },\r\n    isFinished: false,\r\n    textAreaRef: {}\r\n}\r\n\r\nexport default TextArea;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Completion = ({\r\n    completion\r\n}) => {\r\n    return (\r\n        <div>\r\n            Completion: {Math.floor(completion * 100)}%\r\n        </div>\r\n    )\r\n}\r\n\r\nCompletion.propTypes = {\r\n    completion: PropTypes.number,\r\n}\r\n\r\nCompletion.defaultProps = {\r\n    completion: 0,\r\n}\r\n\r\nexport default Completion;","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport TextBox from \"./components/TextBox/TextBox\";\r\nimport Timer from \"./components/Timer/Timer\"\r\nimport WordPerMinute from \"./components/WordPerMinute/WordPerMinute\"\r\nimport TextArea from './components/TextArea/TextArea'\r\nimport Completion from \"./components/Completion/Completion\"\r\n\r\nconst Container = styled.div`\r\n  max-width: 1024px;\r\n  margin: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  padding: 16px;\r\n  width: 100%;\r\n`;\r\n\r\nconst RetryButton = styled.button`\r\n  background-color: #f0f0f0;\r\n  border-radius: 4px;\r\n  border: 1px solid black;\r\n  cursor: pointer;\r\n  margin: 8px;\r\n  &:focus{\r\n    border: 1px solid grey;\r\n  }\r\n`\r\n\r\nconst RANDOM_PARAGRAPH_API_URL = 'https://baconipsum.com/api/';\r\n\r\nconst App = () => {\r\n  const MAX_TIME_IN_SECONDS = 180;\r\n\r\n  const [randomParagraph, setRandomParagraph] = useState([]);\r\n  const [textColor, setTextColor] = useState([]);\r\n  const [time, setTime] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [wordPerMinute, setWordPerMinute] = useState(0);\r\n  const [completion, setCompletion] = useState(0);\r\n\r\n  const textAreaRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const totalRef = useRef(0);\r\n\r\n  const isFinished = MAX_TIME_IN_SECONDS - time <= 0;\r\n\r\n  const getTimerTime = (startTime) => {\r\n    return Math.floor((new Date - startTime) / 1000)\r\n  }\r\n\r\n  const startTimer = () => {\r\n    const startTime = new Date();\r\n    intervalRef.current = setInterval(() => {\r\n      if (!isFinished) {\r\n        setTime(getTimerTime(startTime));\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  const handleInputChange = (e) => {\r\n    if (!isFinished) {\r\n      if (!intervalRef.current) {\r\n        startTimer();\r\n      }\r\n      const splittedTargetValue = e.target.value.split('');\r\n      const textColorCopy = [...textColor];\r\n      totalRef.current = 0;\r\n      randomParagraph.forEach((value, index) => {\r\n        if (!splittedTargetValue[index]) {\r\n          textColorCopy[index] = 'red';\r\n          setTextColor(textColorCopy);\r\n        }\r\n        else if (value === splittedTargetValue[index]) {\r\n          textColorCopy[index] = 'green';\r\n          setTextColor(textColorCopy);\r\n          totalRef.current += 1;\r\n        }\r\n        else {\r\n          textColorCopy[index] = 'red';\r\n          setTextColor(textColorCopy);\r\n          totalRef.current += 1;\r\n        }\r\n      });\r\n      setCompletion(splittedTargetValue.length / randomParagraph.length)\r\n    }\r\n  }\r\n\r\n  const resetAllValues = () => {\r\n    clearInterval(intervalRef.current)\r\n    setTime(null);\r\n    totalRef.current = 0;\r\n    intervalRef.current = null;\r\n    setWordPerMinute(0);\r\n    setCompletion(0);\r\n    setTime(null);\r\n    setError(null);\r\n    getRandomParagraph()\r\n    textAreaRef.current.value = '';\r\n  }\r\n\r\n  const getRandomParagraph = () => {\r\n    const DEFAULT_TYPE = 'all-meat';\r\n    fetch(`${RANDOM_PARAGRAPH_API_URL}?type=${DEFAULT_TYPE}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const splittedParagraph = data.join(' ').replace(/\\s{2,}/g, ' ').split('');\r\n        const colorArray = splittedParagraph.map(_ => 'red');\r\n        setTextColor(colorArray);\r\n        setRandomParagraph(splittedParagraph);\r\n      })\r\n      .catch((error) => setError(error));\r\n  }\r\n\r\n  useEffect(() => {\r\n    getRandomParagraph()\r\n    return () => {\r\n      clearInterval(intervalRef.current)\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (completion >= 1) {\r\n      textAreaRef.current.blur();\r\n      clearInterval(intervalRef.current)\r\n    }\r\n  }, [completion])\r\n\r\n  useEffect(() => {\r\n    if (isFinished) {\r\n      clearInterval(intervalRef.current)\r\n    }\r\n    if (time && !isFinished) {\r\n      const timeInMinute = time / 60;\r\n      const grossWordPerMinute = Math.floor((totalRef.current / 5) / timeInMinute);\r\n      setWordPerMinute(grossWordPerMinute);\r\n      if (MAX_TIME_IN_SECONDS - time < 0) {\r\n        resetAllValues();\r\n      }\r\n    }\r\n  }, [time]);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <Timer timeRemaining={MAX_TIME_IN_SECONDS - time} />\r\n        <WordPerMinute wordPerMinute={wordPerMinute} />\r\n        <Completion completion={completion} />\r\n      </Header>\r\n      {!error\r\n        ? <TextBox textColor={textColor} randomParagraph={randomParagraph} />\r\n        : { error }}\r\n      <TextArea\r\n        handleInputChange={handleInputChange}\r\n        isFinished={isFinished}\r\n        textAreaRef={textAreaRef}\r\n      />\r\n      <RetryButton onClick={resetAllValues}>Retry</RetryButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}